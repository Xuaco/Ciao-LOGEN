:-op(1150,fx,filter).
:-op(1150,fx,type).
:-op(500,xfx,--->).
flatten(X,Res) :-
        var(X), !,
        Res=X.
flatten((X,Y),Res) :- !,
        flatten(X,FX),
        (   FX==fail ->
            Res=fail
        ;   flatten(Y,FY),
            (   FX==true ->
                Res=FY
            ;   FY==true ->
                Res=FX
            ;   Res=(FX,FY)
            )
        ).
flatten((LHS;E),Res) :-
        nonvar(LHS),
        LHS=(I->T), !,
        flatten(I,FI),
        (   FI==fail ->
            flatten(E,Res)
        ;   FI==true ->
            flatten(T,Res)
        ;   Res=(FI->FT;FE),
            flatten(T,FT),
            flatten(E,FE)
        ).
flatten(call(X),X) :-
        nonvar(X), !.
flatten(\+X,\+Y) :-
        flatten(X,Y), !.
flatten(when(C,Call),when(C,FCall)) :-
        flatten(Call,FCall), !.
flatten(X,X).
portray_message(informational,_).
:-use_module(library(lists)).
:- dynamic
        gx_data/2.
generalise_call(Filters,Call,GenCall) :-
        Call=..[F|Args],
        gen_filters_list(Filters,Args,GArgs,_),
        GenCall=..[F|GArgs].
filter_call(Filters,Call,GCall,FCall) :-
        Call=..[F|Args],
        GCall=..[F|GArgs],
        gen_filters_list(Filters,Args,GArgs,FArgs),
        gensym(F,NewF),
        FCall=..[NewF|FArgs].
generalise_and_filter(Filters,Call,GenCall,FCall) :-
        Call=..[F|Args],
        gen_filters_list(Filters,Args,GenArgs,FilArgs),
        GenCall=..[F|GenArgs],
        gensym(F,NewF),
        FCall=..[NewF|FilArgs].
gen_filters_list(FilterList,Args,GArgs1,FArgs1) :-
        member(Filter,FilterList),
        l_gen_fil(Filter,Args,[],GArgs,[],FArgs),
        reverse(GArgs,GArgs1),
        reverse(FArgs,FArgs1), !.
l_gen_fil([],[],G,G,F,F).
l_gen_fil([Type|Types],[A|Args],GArgsIn,GArgsOut,FArgsIn,FArgsOut) :-
        gen_fil(Type,A,GArgsIn,GArgsOut1,FArgsIn,FArgsOut1),
        l_gen_fil(Types,Args,GArgsOut1,GArgsOut,FArgsOut1,FArgsOut).
gen_fil(static,A,G,[A|G],F,F) :-
        ground(A).
gen_fil(static_nf,A,G,[A|G],F,[A|F]) :-
        ground(A).
gen_fil(dynamic,_,G,[A|G],F,[A|F]).
gen_fil(nonvar,A,GIn,[G|GIn],FIn,FOut) :-
        functor(A,Func,Arity),
        functor(G,Func,Arity),
        G=..[Func|FArgs],
        append(FIn,FArgs,FOut).
gen_fil(struct(Func,TArgs),A,GIn,[G|GIn],FIn,FOut) :-
        A=..[Func|Args],
        l_gen_fil(TArgs,Args,[],GArgs1,FIn,FOut1),
        reverse(FOut1,FOut),
        reverse(GArgs1,GArgs),
        G=..[Func|GArgs].
gen_fil((type T),A,GI,GO,FI,FO) :-
        typedef(T,Def),
        gen_fil(Def,A,GI,GO,FI,FO).
gen_fil((T1;_T2),A,GIn,GOut,FIn,FOut) :-
        gen_fil(T1,A,GIn,GOut,FIn,FOut).
gen_fil((_T1;T2),A,GIn,GOut,FIn,FOut) :-
        gen_fil(T2,A,GIn,GOut,FIn,FOut).
:- dynamic
        usertypedef/2.
typedef(list(T),(struct([],[]);struct('.',[T,(type list(T))]))).
typedef(static_or_dynamic,(static;dynamic)).
typedef(T,Def) :-
        usertypedef(T,Def).
gensym(H,NewHead) :-
        (   gx_data(sym,Sym) ->
            NewSym is Sym+1,
            retract(gx_data(sym,Sym))
        ;   NewSym=0
        ),
        assert(gx_data(sym,NewSym)),
        add_id(H,NewSym,NewHead).
add_id(H,Sym,NH) :-
        atom_concat(H,'__',H1),
        name(H1,H1S),
        name(Sym,SymS),
        append(H1S,SymS,NHS),
        name(NH,NHS).
same_length([],[]).
same_length([_|T],[_|T2]) :-
        same_length(T,T2).
build_unfold_call(Call,SpecCode,LogenData,UnfoldCall) :-
        Call=..[Func|Args],
        atom_concat(Func,'_u',NewFunc),
        append(Args,[SpecCode,LogenData],NewArgs),
        UnfoldCall=..[NewFunc|NewArgs].
build_request_call(Call,Req,ResCall,LogenData,RequestCall) :-
        Call=..[Func|Args],
        atom_concat(Func,'_request',NewFunc),
        append(Args,[Req,ResCall,LogenData],NewArgs),
        RequestCall=..[NewFunc|NewArgs].
:- dynamic
        memo_table/4.
:- dynamic
        spec_clause/1.
:-use_module(library(terms)).
:-use_module(library(terms_check)).
find_pattern(ID,Call,ResCall,_Requestor) :-
        copy_term(Call,CallCopy),
        memo_table(ID,Call,ResCall,_MEMODATA),
        variant(CallCopy,Call).
insert_pattern(ID,GCall,FCall,MEMODATA) :-
        assert(memo_table(ID,GCall,FCall,MEMODATA)).
update_status(ID,GCall,FCall,Req) :-
        retract(memo_table(ID,GCall,FCall,MEMODATA)),
        get_memodata_requestor(MEMODATA,pending(Req)),
        set_memodata_requestor(MEMODATA,Req,MEMODATAPRIME),
        assert(memo_table(ID,GCall,FCall,MEMODATAPRIME)).
spec_driver :-
        memo_table(ID,GCall,FCall,[pending(Req)|_MEMODATA]),
        update_status(ID,GCall,FCall,Req), !,
        generate_code(GCall,FCall),
        spec_driver.
spec_driver.
generate_code(Call,ResCall) :-
        copy_term((Call,ResCall),(CCall,CResCall)),
        build_unfold_call(Call,Res,[[CCall],CResCall],UnfoldCall),
        findall((ResCall:-FRes),(UnfoldCall,flatten(Res,FRes)),Clauses),
        (   Clauses=[] ->
            save_clauses([(ResCall:-fail)])
        ;   save_clauses(Clauses)
        ).
save_clauses([]).
save_clauses([C|Cs]) :-
        (   C=(Head:-_Body) ->
            true
        ;   Head=C
        ),
        assert(spec_clause(Head,C)),
        save_clauses(Cs).
print_memo_table(S) :-
        memo_table(A,B,C,D),
        format(S,[47,42,32,126,119,46,32,42,47,126,110],[memo_table(A,B,C,D)]),
        fail.
print_memo_table(_).
print_clauses(S) :-
        memo_table(_,Orig,Head,_),
        format(S,[126,110,47,42,32,126,119,32,58,45,32,126,119,46,32,42,47,126,110],[Orig,Head]),
        spec_clause(Head,C),
        portray_clause(S,C),
        fail.
print_clauses(S) :-
        (   gx_error(_) ->
            write(S,'/* ------------------------------------------ */'),
            nl(S),
            write(S,'/* Error(s) occurred during specialization !! */'),
            nl(S),
            write(S,'/* ------------------------------------------ */'),
            nl(S)
        ;   true
        ).
:- dynamic
        gx_error/1.
:- dynamic
        gx_warning/1.
add_gx_error(Err) :-
        assert(gx_error(Err)).
add_gx_error(Err) :-
        assert(gx_warning(Err)).
get_logendata_id([_,ID|_LogenData],ID).
set_logendata_id(ID,[H,_OLDID|LogenData],[H,ID|LogenData]) :- !.
set_logendata_id(H,LD,LD2) :-
        write(user_error,failed_set_logendata_id(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
get_logendata_history([History|_LogenData],History).
set_logendata_history(History,[_|LogenData],[CHistory|LogenData]) :-
        copy_term(History,CHistory), !.
set_logendata_history(H,LD,LD2) :-
        write(user_error,failed_set_logendata_history(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
get_memodata_requestor([REQ|_MEMODATA],REQ).
set_memodata_requestor([_OLD|MEMODATA],Req,[Req|MEMODATA]).
get_memodata_id([_Req,ID|_MEMODATA],ID).
set_memodata_id([Req,_|MEMODATA],ID,[Req,ID,MEMODATA]).
init_memodata(Requestor,Parent,[Requestor,Parent]).
solve_atom_request(A,Requestor,ResidualCall,__LOGENDATA) :-
        generalise_call([[nonvar]],solve_atom(A),GenCall),
        (   find_pattern(vanilla_list,solve_atom(A),ResidualCall,Requestor) ->
            true
        ;   __LOGENDATA=[_,ParentID|_],
            filter_call([[nonvar]],solve_atom(A),GenCall,ResidualCall),
            true,
            true,
            init_memodata(pending(Requestor),ParentID,B),
            insert_pattern(vanilla_list,GenCall,ResidualCall,B)
        ),
        GenCall=solve_atom(A).
test_request(A,Requestor,ResidualCall,__LOGENDATA) :-
        generalise_call([[dynamic]],test(A),GenCall),
        (   find_pattern(vanilla_list,test(A),ResidualCall,Requestor) ->
            true
        ;   __LOGENDATA=[_,ParentID|_],
            filter_call([[dynamic]],test(A),GenCall,ResidualCall),
            true,
            true,
            init_memodata(pending(Requestor),ParentID,B),
            insert_pattern(vanilla_list,GenCall,ResidualCall,B)
        ),
        GenCall=test(A).
solve_u([],true,__LOGENDATA).
solve_u([A|B],(C,D),__LOGENDATA) :-
        solve_atom_request(A,internal,C,__LOGENDATA),
        solve_u(B,D,__LOGENDATA).
solve_atom_u(A,(B,C),__LOGENDATA) :-
        my_clause_u(A,D,B,__LOGENDATA),
        solve_u(D,C,__LOGENDATA).
my_clause_u(app([],A,A),[],true,__LOGENDATA).
my_clause_u(app([B|C],A,[B|D]),[app(C,A,D)],true,__LOGENDATA).
my_clause_u(p,[p],true,__LOGENDATA).
my_clause_u(solve2([]),[],true,__LOGENDATA).
my_clause_u(solve2([A|B]),[solve_atom2(A),solve2(B)],true,__LOGENDATA).
my_clause_u(solve_atom2(A),[my_clause2(A,B),solve2(B)],true,__LOGENDATA).
my_clause_u(my_clause2(app([],A,A),[]),[],true,__LOGENDATA).
my_clause_u(my_clause2(app([B|C],A,[B|D]),[app(C,A,D)]),[],true,__LOGENDATA).
test_u(A,B,__LOGENDATA) :-
        solve_atom_request(solve_atom2(app([a,b,c],[d,e,f,g],A)),internal,B,__LOGENDATA).
read_from_chars(String,Term) :-
        mktemp('/tmp/readatomXXXXXX',TmpFile),
        open(TmpFile,write,TmpOut),
        display(TmpOut,String),
        display(TmpOut,' .
'),
        close(TmpOut),
        open(TmpFile,read,TmpIn),
        read(TmpIn,Term),
        close(TmpIn).
print_usage :-
        usage(Msg),
        print(user_error,Msg),
        nl,
        print(user_error,'  Possible Options are:'),
        nl,
        print_options.
print_options :-
        recognised_option(Opt,_,_,Msg),
        print(user_error,'      '),
        print(user_error,Opt),
        print(user_error,': '),
        print(user_error,Msg),
        nl,
        fail.
print_options.
get_options([],[],[]).
get_options([X|T],Options,OtherArgs) :-
        (   recognised_option(X,Opt,Values,_) ->
            append(Values,Rest,T),
            RT=Rest,
            Options=[Opt|OT],
            OtherArgs=AT
        ;   Options=OT,
            OtherArgs=[X|AT],
            RT=T
        ),
        get_options(RT,OT,AT).
usage('Usage: gxfile [Options] "Atom."').
recognised_option('--help',help,[],'Prints this message').
recognised_option('-o',outfile(Out),[Out],'Specialised filename').
recognised_option('--add_entry',add_entry,[],'Generate entry point').
vanilla_list_entry(Goal,ResCall,Opts) :-
        (   member(outfile(A),Opts) ->
            open(A,write,B)
        ;   B=user
        ),
        statistics(runtime,[C,_]),
        build_request_call(Goal,crossmodule,ResCall,[[],entry],REQ),
        REQ,
        spec_driver,
        true,
        print_clauses(B),
        statistics(runtime,[D,_]),
        E is D-C,
        format(user,[126,78,47,42,32,83,112,101,99,105,97,108,105,115,97,116,105,111,110,32,116,105,109,101,32,126,119,32,109,115,32,40,114,117,110,116,105,109,101,41,32,42,47,126,110],[E]),
        (   member(add_entry,Opts) ->
            portray_clause(B,(Goal:-ResCall))
        ;   true
        ),
        close(B).
main(A) :-
        get_options(A,Opts,[AtomGoal|_]),
        (   member(help,Opts) ->
            fail
        ;   true
        ), !,
        read_from_chars(AtomGoal,Goal),
        vanilla_list_entry(Goal,_Res,Opts).
main(_) :-
        print_usage.
