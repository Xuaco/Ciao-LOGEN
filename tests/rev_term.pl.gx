:-module(_,[main/1,main_gx/1]).
mnf(X) :-
        if(X,true,(add_error(runtime_checks,[67,97,108,108,32,102,97,105,108,101,100,58,32,126,119,126,110],[X]),fail)).
pp_mnf(X) :-
        add_postfix_to_pred(X,'_pre',Pre),
        (   Pre ->
            true
        ;   add_error(runtime_checks,[80,114,101,32,67,111,110,100,105,116,105,111,110,32,102,97,105,108,101,100,58,32,126,119,126,110],[Pre])
        ),
        mnf(X),
        add_postfix_to_pred(X,'_post',Post),
        (   Post ->
            true
        ;   add_error(runtime_checks,[80,111,115,116,32,67,111,110,100,105,116,105,111,110,32,102,97,105,108,101,100,58,32,126,119,126,110],[Post])
        ).
add_postfix_to_pred($:(Call),Extension,$:(Post)) :- !,
        add_postfix_to_pred(Call,Extension,Post).
add_postfix_to_pred(Call,Extension,PostCall) :-
        Call=..[F|Args],
        atom_concat(F,Extension,PostF),
        PostCall=..[PostF|Args].
:- dynamic
        logged_error/2.
:- dynamic
        verbosity_level/1.
set_verbosity_level(NewLevel,OldLevel) :-
        verbosity_level(OldLevel),
        retract(verbosity_level(OldLevel)),
        assert(verbosity_level(NewLevel)).
verbosity_level(1).
message_stream(user_error).
error_stream(user_error).
reset_errors :-
        retractall(logged_error(_,_)).
reset_errors_from_source(Source) :-
        retractall(logged_error(Source,_)).
add_exception(Source,ErrFormat,ErrArgs,Exception) :-
        parse_exception(Exception,FmtS,FmtArgs),
        append(ErrFormat,FmtS,FormatString),
        append(ErrArgs,FmtArgs,FormatArgs),
        add_error(Source,FormatString,FormatArgs).
add_error(Source,ErrFormat,ErrArgs) :-
        error_stream(ErrS),
        format(ErrS,[126,78,32,33,32,65,110,32,101,114,114,111,114,32,111,99,99,117,114,114,101,100,126,110,33,32],[]),
        format(ErrS,ErrFormat,ErrArgs),
        format(ErrS,[126,78],[]),
        flush_output(ErrS),
        assertz(logged_error(Source,ErrFormat-ErrArgs)).
add_message(_Source,Level,Msg,Args) :-
        verbosity_level(C),
        Level=<C, !,
        print_message(Msg,Args).
add_message(_,_,_,_) :- !.
print_message(Msg,Args) :-
        message_stream(Str),
        format(Str,[126,78,32,37,32],[]),
        format(Str,Msg,Args),
        format(Str,[126,78],[]),
        flush_output(Str).
get_error(Source,ErrMsg) :-
        retract(logged_error(Source,ErrMsg)).
get_all_errors(All) :-
        findall(Err,get_error(_Source,Err),All),
        \+All=[].
test_error_occured(Source) :-
        logged_error(Source,_), !.
count_errors_occured(NrOfErrors) :-
        count_errors_occured_with_source(_,NrOfErrors).
count_errors_occured_with_source(Source,NrOfErrors) :-
        findall(1,logged_error(Source,_),Ls),
        length(Ls,NrOfErrors).
parse_exception(error(syntax_error(P1,P2,Msg,Tokens),_Pred),FmtString,FmtArgs) :-
        token_format_string(Tokens,ErrString),
        append([83,89,78,84,65,88,32,69,82,82,79,82,58,32,40,108,105,110,101,115,32,126,119,45,126,119,41,32,126,119,126,110],ErrString,FmtString),
        append([P1,P2,Msg],Tokens,FmtArgs), !.
parse_exception(error(existence_error(source_sink,Filename),_Pred),[85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,102,105,108,101,58,32,126,119],[Filename]) :- !.
parse_exception(E,[126,119],[E]).
token_format_string([],[]).
token_format_string([_T|Ts],[126,119,32|ErrStr]) :-
        token_format_string(Ts,ErrStr).
:-op(1150,fx,filter).
:-op(1150,fx,type).
:-op(500,xfx,--->).
:-use_module(library(terms_vars)).
flatten(X,Res) :-
        var(X), !,
        Res=X.
flatten((X,Y),Res) :- !,
        flatten(X,FX),
        (   FX==fail ->
            Res=fail
        ;   flatten(Y,FY),
            (   FX==true ->
                Res=FY
            ;   FY==true ->
                Res=FX
            ;   Res=(FX,FY)
            )
        ).
flatten((LHS;E),Res) :-
        nonvar(LHS),
        LHS=(I->T), !,
        flatten(I,FI),
        (   FI==fail ->
            flatten(E,Res)
        ;   FI==true ->
            flatten(T,Res)
        ;   Res=(FI->FT;FE),
            flatten(T,FT),
            flatten(E,FE)
        ).
flatten(call(X),X) :-
        nonvar(X), !.
flatten((L;R),Disj) :- !,
        flatten(L,FL),
        flatten(R,FR),
        (   FL=true ->
            Disj=FR
        ;   FR=true ->
            Disj=FL
        ;   Disj=(FL;FR)
        ).
flatten(\+X,\+Y) :-
        flatten(X,Y), !.
flatten(when(C,Call),when(C,FCall)) :-
        flatten(Call,FCall), !.
flatten(X,X).
portray_message(informational,_).
:-use_module(library(lists)).
:- dynamic
        gx_data/2.
generalise_call(Filters,Call,GenCall) :-
        Call=..[F|Args],
        gen_filters_list(Filters,Args,GArgs,_,_,_),
        GenCall=..[F|GArgs].
filter_call(Filters,Call,GCall,FCall) :-
        Call=..[F|Args],
        GCall=..[F|GArgs],
        gen_filters_list(Filters,Args,GArgs,FArgs,_,_),
        gensym(F,NewF),
        FCall=..[NewF|FArgs].
generalise_and_filter(Filters,Call,GenCall,FCall) :-
        Call=..[F|Args],
        gen_filters_list(Filters,Args,GenArgs,FilArgs,_,_),
        GenCall=..[F|GenArgs],
        gensym(F,NewF),
        FCall=..[NewF|FilArgs].
gen_filters_list(FilterList,Args,GArgs1,FArgs1,OnlineArgs1,OnlineMap1) :-
        member(Filter,FilterList),
        l_gen_fil(Filter,Args,[],GArgs,[],FArgs,[],OnlineArgs,[],OnlineMap),
        reverse(GArgs,GArgs1),
        reverse(FArgs,FArgs1),
        reverse(OnlineArgs,OnlineArgs1),
        reverse(OnlineMap,OnlineMap1), !.
l_gen_fil([],[],G,G,F,F,OA,OA,OM,OM).
l_gen_fil([Type|Types],[A|Args],GArgsIn,GArgsOut,FArgsIn,FArgsOut,OIn,OOut,OMIn,OMOut) :-
        gen_fil(Type,A,GArgsIn,GArgsOut1,FArgsIn,FArgsOut1,OIn,OOut1,OMIn,OMOut1),
        l_gen_fil(Types,Args,GArgsOut1,GArgsOut,FArgsOut1,FArgsOut,OOut1,OOut,OMOut1,OMOut).
gen_fil(static,A,G,[A|G],F,F,O,O,OM,OM) :-
        ground(A).
gen_fil(static_nf,A,G,[A|G],F,[A|F],O,O,OM,OM) :-
        ground(A).
gen_fil(online,A,G,[Var|G],F,F,O,[A|O],OM,[Var|OM]).
gen_fil(dynamic,_,G,[A|G],F,[A|F],O,O,OM,OM).
gen_fil(nonvar,A,GIn,[G|GIn],FIn,FOut,O,O,OM,OM) :-
        functor(A,Func,Arity),
        functor(G,Func,Arity),
        G=..[Func|FArgs],
        append(FIn,FArgs,FOut).
gen_fil(struct(Func,TArgs),A,GIn,[G|GIn],FIn,FOut,OIn,OOut,OMIn,OMOut) :-
        A=..[Func|Args],
        l_gen_fil(TArgs,Args,[],GArgs1,FIn,FOut1,OIn,OOut1,OMIn,OMOut1),
        reverse(FOut1,FOut),
        reverse(GArgs1,GArgs),
        reverse(OOut1,OOut),
        reverse(OMOut1,OMOut),
        G=..[Func|GArgs].
gen_fil((type T),A,GI,GO,FI,FO,OIn,OOut,OMIn,OMOut) :-
        typedef(T,Def),
        gen_fil(Def,A,GI,GO,FI,FO,OIn,OOut,OMIn,OMOut).
gen_fil((T1;_T2),A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut) :-
        gen_fil(T1,A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut).
gen_fil((_T1;T2),A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut) :-
        gen_fil(T2,A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut).
:- dynamic
        usertypedef/2.
typedef(list(T),(struct([],[]);struct('.',[T,(type list(T))]))).
typedef(static_or_dynamic,(static;dynamic)).
typedef(T,Def) :-
        usertypedef(T,Def).
gensym(H,NewHead) :-
        (   gx_data(sym,Sym) ->
            NewSym is Sym+1,
            retract(gx_data(sym,Sym))
        ;   NewSym=0
        ),
        assert(gx_data(sym,NewSym)),
        add_id(H,NewSym,NewHead).
add_id(H,Sym,NH) :-
        atom_concat(H,'__',H1),
        name(H1,H1S),
        name(Sym,SymS),
        append(H1S,SymS,NHS),
        name(NH,NHS).
same_length([],[]).
same_length([_|T],[_|T2]) :-
        same_length(T,T2).
build_unfold_call(Call,SpecCode,LogenData,UnfoldCall) :-
        Call=..[Func|Args],
        atom_concat(Func,'_u',NewFunc),
        append(Args,[SpecCode,LogenData],NewArgs),
        UnfoldCall=..[NewFunc|NewArgs].
build_request_call(Call,Req,ResCall,LogenData,RequestCall) :-
        Call=..[Func|Args],
        atom_concat(Func,'_request',NewFunc),
        append(Args,[Req,ResCall,LogenData],NewArgs),
        RequestCall=..[NewFunc|NewArgs].
spec_data(_,_) :-
        fail.
:- dynamic
        memo_table/4.
:- dynamic
        spec_clause/2.
:-use_module(library(terms)).
:-use_module(library(terms_check)).
find_pattern(ID,Call,ResCall,_Requestor) :-
        copy_term(Call,CallCopy),
        memo_table(ID,Call,ResCall,_MEMODATA),
        variant(CallCopy,Call).
insert_pattern(ID,GCall,FCall,MEMODATA) :-
        assert(memo_table(ID,GCall,FCall,MEMODATA)).
update_status(ID,GCall,FCall,Req) :-
        retract(memo_table(ID,GCall,FCall,MEMODATA)),
        get_memodata_requestor(MEMODATA,pending(Req)),
        set_memodata_requestor(MEMODATA,Req,MEMODATAPRIME),
        assert(memo_table(ID,GCall,FCall,MEMODATAPRIME)).
spec_driver :-
        memo_table(ID,GCall,FCall,[pending(Req)|_MEMODATA]),
        update_status(ID,GCall,FCall,Req), !,
        generate_code(GCall,FCall),
        spec_driver.
spec_driver.
generate_code(Call,ResCall) :-
        copy_term((Call,ResCall),(CCall,CResCall)),
        build_unfold_call(Call,Res,[[CCall],CResCall],UnfoldCall),
        findall((ResCall:-FRes),(UnfoldCall,flatten(Res,FRes)),Clauses),
        (   Clauses=[] ->
            save_clauses([(ResCall:-fail)])
        ;   save_clauses(Clauses)
        ).
save_clauses([]).
save_clauses([C|Cs]) :-
        (   C=(Head:-_Body) ->
            true
        ;   Head=C
        ),
        assert(spec_clause(Head,C)),
        save_clauses(Cs).
print_memo_table(S) :-
        memo_table(A,B,C,D),
        format(S,[47,42,32,126,119,46,32,42,47,126,110],[memo_table(A,B,C,D)]),
        fail.
print_memo_table(_).
print_clauses(S) :-
        spec_data(declaration,Decl),
        portray_clause(S,(:-Decl)),
        fail.
print_clauses(S) :-
        memo_table(_,Orig,Head,_),
        copy_term([Orig,Head],Copy),
        prettyvars(Copy),
        format(S,[126,110,47,42,32,126,119,32,58,45,32,126,119,46,32,42,47,126,110],Copy),
        spec_clause(Head,C),
        portray_clause(S,C),
        fail.
print_clauses(S) :-
        (   gx_error(_) ->
            write(S,'/* ------------------------------------------ */'),
            nl(S),
            write(S,'/* Error(s) occurred during specialization !! */'),
            nl(S),
            write(S,'/* ------------------------------------------ */'),
            nl(S)
        ;   true
        ).
:- dynamic
        gx_error/1.
:- dynamic
        gx_warning/1.
add_gx_error(Err) :-
        assert(gx_error(Err)).
add_gx_error(Err) :-
        assert(gx_warning(Err)).
get_logendata_id([_,ID|_LogenData],ID).
set_logendata_id(ID,[H,_OLDID|LogenData],[H,ID|LogenData]) :- !.
set_logendata_id(H,LD,LD2) :-
        write(user_error,failed_set_logendata_id(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
get_logendata_history([History|_LogenData],History).
set_logendata_history(History,[_|LogenData],[CHistory|LogenData]) :-
        copy_term(History,CHistory), !.
set_logendata_history(H,LD,LD2) :-
        write(user_error,failed_set_logendata_history(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
get_memodata_requestor([REQ|_MEMODATA],REQ).
set_memodata_requestor([_OLD|MEMODATA],Req,[Req|MEMODATA]).
get_memodata_id([_Req,ID|_MEMODATA],ID).
set_memodata_id([Req,_|MEMODATA],ID,[Req,ID,MEMODATA]).
init_memodata(Requestor,Parent,[Requestor,Parent]).
test_request(A,Requestor,ResidualCall,__LOGENDATA) :-
        generalise_call([[dynamic]],test(A),GenCall),
        (   find_pattern(rev_term,test(A),ResidualCall,Requestor) ->
            true
        ;   __LOGENDATA=[_,ParentID|_],
            filter_call([[dynamic]],test(A),GenCall,ResidualCall),
            true,
            true,
            init_memodata(pending(Requestor),ParentID,B),
            insert_pattern(rev_term,GenCall,ResidualCall,B)
        ),
        GenCall=test(A).
rev_u(A,B,C,__LOGENDATA) :-
        revacc_u(A,[],B,C,__LOGENDATA).
revacc_u([],A,A,true,__LOGENDATA).
revacc_u([D|E],A,B,C,__LOGENDATA) :-
        revacc_u(E,[D|A],B,C,__LOGENDATA).
test_u(A,(B,C),__LOGENDATA) :-
        length_u(D,10000,B,__LOGENDATA),
        rev_u(D,A,C,__LOGENDATA).
length_u([],0,true,__LOGENDATA).
length_u([_|C],A,B,__LOGENDATA) :-
        A>0,
        D is A-1,
        length_u(C,D,B,__LOGENDATA).
read_from_chars(String,Term) :-
        mktemp('/tmp/readatomXXXXXX',TmpFile),
        open(TmpFile,write,TmpOut),
        display(TmpOut,String),
        display(TmpOut,' .
'),
        close(TmpOut),
        open(TmpFile,read,TmpIn),
        read(TmpIn,Term),
        close(TmpIn),
        delete_file(TmpFile).
print_usage :-
        usage(Msg),
        print(user_error,Msg),
        nl,
        print(user_error,'  Possible Options are:'),
        nl,
        print_options.
print_options :-
        recognised_option(Opt,_,Args,Msg),
        print(user_error,'      '),
        print(user_error,Opt),
        print_option_args(Args,1),
        print(user_error,': '),
        print(user_error,Msg),
        nl,
        fail.
print_options.
print_option_args([],_).
print_option_args([_|T],N) :-
        print(user_error,' ARG'),
        print(user_error,N),
        N1 is N+1,
        print_option_args(T,N1).
get_options([],[],[]).
get_options([X|T],Options,OtherArgs) :-
        (   recognised_option(X,Opt,Values,_) ->
            append(Values,Rest,T),
            RT=Rest,
            Options=[Opt|OT],
            OtherArgs=AT
        ;   Options=OT,
            OtherArgs=[X|AT],
            RT=T
        ),
        get_options(RT,OT,AT).
usage('Usage: gxfile [Options] "Atom."').
recognised_option('--help',help,[],'Prints this message').
recognised_option('-o',outfile(Out),[Out],'Specialised filename').
recognised_option('--add_entry',add_entry,[],'Generate entry point').
rev_term_entry(Goal,ResCall,Opts) :-
        (   member(outfile(A),Opts) ->
            open(A,write,B)
        ;   B=user
        ),
        statistics(runtime,[C,_]),
        mnf(build_request_call(Goal,crossmodule,ResCall,[[],entry],REQ)),
        REQ,
        mnf(spec_driver),
        true,
        mnf(print_clauses(B)),
        statistics(runtime,[D,_]),
        E is D-C,
        format(user,[126,78,47,42,32,83,112,101,99,105,97,108,105,115,97,116,105,111,110,32,116,105,109,101,32,126,119,32,109,115,32,40,114,117,110,116,105,109,101,41,32,42,47,126,110],[E]),
        (   member(add_entry,Opts) ->
            portray_clause(B,(Goal:-ResCall))
        ;   true
        ),
        close(B).
main(A) :-
        main_gx(A).
main(_) :-
        print_usage.
main_gx(A) :-
        get_options(A,Opts,[AtomGoal|_]),
        (   member(help,Opts) ->
            fail
        ;   true
        ), !,
        read_from_chars(AtomGoal,Goal),
        rev_term_entry(Goal,_Res,Opts),
        count_errors_occured(B),
        (   B>0 ->
            format(user,[126,110,42,42,42,32,126,119,32,101,114,114,111,114,115,32,111,99,99,117,114,114,101,100,32,33,126,110],[B]),
            halt(1)
        ;   true
        ).
