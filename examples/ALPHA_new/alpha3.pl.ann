logen(update_store/5,update_store([],A,B,C,[])) :-
        logen(rescall,format(user,[42,42,42,32,82,117,110,116,105,109,101,32,69,114,114,111,114,44,32,79,98,106,101,99,116,32,126,119,32,110,111,116,32,102,111,117,110,100,46,126,110,42,42,42,32,67,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,102,105,101,108,100,32,126,119,32,116,111,32,126,119,46,126,110],[A,B,C])).
logen(update_store/5,update_store([dyn_obj(A,B,C)|D],E,F,G,[dyn_obj(A,B,H)|I])) :-
        resif(logen(call,A=E),(logen(unfold,update_field(C,F,G,H)),logen(call,I=D)),(logen(call,H=C),logen(unfold,update_store(D,E,F,G,I)))).
logen(update_field/4,update_field([],A,B,[])) :-
        logen(rescall,format(user,[42,42,42,32,82,117,110,116,105,109,101,32,69,114,114,111,114,44,32,70,105,101,108,100,32,126,119,32,110,111,116,32,102,111,117,110,100,46,126,110,42,42,42,32,67,111,117,108,100,32,110,111,116,32,117,112,100,97,116,101,32,102,105,101,108,100,32,116,111,32,126,119,46,126,110],[A,B])).
logen(update_field/4,update_field([dyn_field(A,B)|C],D,E,[dyn_field(A,F)|G])) :-
        resif(logen(call,A=D),(logen(call,F=E),logen(call,G=C)),(logen(call,F=B),logen(unfold,update_field(C,D,E,G)))).
logen(class_of/4,class_of(A,B,C,D)) :-
        logen(call,member(class(D,_,_,_,_),A)),
        logen(call,member(dyn_obj(C,D,_),B)).
logen(method_body/4,method_body(A,B,C,D)) :-
        logen(call,member(class(B,_,_,E,_),A)),
        logen(call,member(meth(_,C,_,D),E)).
logen(init_val/2,init_val(A,B)) :-
        if(logen(call,A=bool),logen(call,B=false),logen(call,B=null)).
logen(create_field_list/2,create_field_list([],[])).
logen(create_field_list/2,create_field_list([field(A,B)|C],D)) :-
        logen(unfold,create_field_list(C,E)),
        logen(unfold,init_val(A,F)),
        logen(call,D=[dyn_field(B,F)|E]).
logen(super_class/3,super_class(A,B,C)) :-
        logen(call,member(class(B,C,_,_,_),A)).
logen(init_instance_fields/3,init_instance_fields(A,B,C)) :-
        logen(call,member(class(B,_,D,_,_),A)),
        logen(unfold,create_field_list(D,C)).
logen(init_fields/3,init_fields(_,object,[])).
logen(init_fields/3,init_fields(A,B,C)) :-
        logen(unfold,init_instance_fields(A,B,D)),
        logen(unfold,super_class(A,B,E)),
        logen(unfold,init_fields(A,E,F)),
        logen(call,append(D,F,C)).
logen(aspects/2,aspects(A,B)) :-
        logen(call,member(class(main,_,_,_,B),A)).
logen(execute_advice/7,execute_advice(_,_,_,[],_,A,B)) :-
        logen(call,B=A).
logen(execute_advice/7,execute_advice(A,B,C,[aspect(D)|E],F,G,H)) :-
        resif(logen(unfold,aspect(D,A,B,C,I)),logen(unfold,eval(B,F,G,I,J,_)),logen(call,J=G)),
        logen(unfold,execute_advice(A,B,C,E,F,J,H)).
logen(before/4,before(A,B,state(C,D),E)) :-
        logen(unfold,on_event(before,A,B,state(C,D),E)).
logen(after/4,after(A,B,state(C,D),E)) :-
        logen(unfold,on_event(after,A,B,state(C,D),E)).
logen(on_event/5,on_event(A,B,C,state(D,E),F)) :-
        logen(rescall,print(on_event(A,C,E))),
        logen(rescall,nl),
        logen(unfold,aspects(B,G)),
        resif(logen(unfold,execute_advice(A,B,E,G,C,state(D,E),F)),logen(call,true),(logen(rescall,print('### FAIL: ')),logen(unfold,println_quoted(execute_advice(A,B,E,G,C,state(D,E),F))),logen(rescall,nl),logen(call,F=state(D,E)))).
logen(aspect/5,aspect(1,before,_,A,('',print(advice)))) :-
        logen(call,A=[calls(_,_,foo,_)|_]).
logen(aspect/5,aspect(2,before,_,A,('',print('before-new')))) :-
        logen(call,A=[new(_,_)]).
logen(aspect/5,aspect(3,after,_,A,('',print('after-new')))) :-
        logen(call,A=[new(_,_)]).
logen(aspect/5,aspect(6,before,_,A,('',print(B)))) :-
        logen(call,A=[new(B,_)|_]).
logen(eval/6,eval(A,B,C,(D,E),F,G)) :-
        logen(rescall,print(eval(E))),
        logen(rescall,nl),
        resif(logen(unfold,eval(D,A,B,C,E,F,G)),(logen(rescall,print(eval_res(E,G))),logen(rescall,nl)),(logen(rescall,print('### FAIL: ')),logen(unfold,println_quoted(eval(A,B,C,(D,E),F,G))),logen(rescall,nl),logen(rescall,fail))).
logen(eval/7,eval(_,_,_,A,true,A,true)).
logen(eval/7,eval(_,_,_,A,false,A,false)).
logen(eval/7,eval(_,_,_,A,null,A,null)).
logen(eval/7,eval(_,A,B,C,seq(D,E),F,G)) :-
        logen(unfold,eval(A,B,C,D,H,_)),
        logen(unfold,eval(A,B,H,E,F,G)).
logen(eval/7,eval(_,_,env(x(A),_),B,x,B,A)).
logen(eval/7,eval(_,_,env(_,this(A)),B,this,B,A)).
logen(eval/7,eval(A,B,C,state(D,E),call(F,G,H),I,J)) :-
        logen(unfold,eval(B,C,state(D,E),F,K,L)),
        logen(unfold,eval(B,C,K,H,state(M,N),O)),
        logen(call,P=env(x(O),this(L))),
        logen(unfold,class_of(B,M,L,Q)),
        logen(unfold,method_body(B,Q,G,R)),
        logen(call,S=[calls(A,L,G,O)|N]),
        logen(unfold,on_event(_,B,C,state(M,S),T)),
        logen(unfold,eval(B,P,T,R,state(U,V),J)),
        logen(call,W=[endCall(A,L,G,O)|V]),
        logen(unfold,on_event(_,B,C,state(U,W),I)).
logen(eval/7,eval(_,A,B,C,if(D,E,F),G,H)) :-
        logen(unfold,eval(A,B,C,D,I,J)),
        disj((logen(call,J==true),logen(call,K=E))
           ,(logen(call,J==false),logen(call,K=F))),
        logen(unfold,eval(A,B,I,K,G,H)).
logen(eval/7,eval(_,A,_,state(B,C),new(D),E,F)) :-
        logen(unfold,gensym(iota,F)),
        logen(unfold,init_fields(A,D,G)),
        logen(call,H=[new(D,F)|C]),
        logen(unfold,before(A,I,state(B,H),state(J,K))),
        logen(call,L=[dyn_obj(F,D,G)|J]),
        logen(unfold,after(A,I,state(L,K),E)).
logen(eval/7,eval(_,_,_,A,print(B),A,null)) :-
        logen(rescall,write(B)),
        logen(rescall,nl).
logen(eval/7,eval(A,B,C,state(D,E),get(F,G),H,I)) :-
        logen(unfold,eval(B,C,state(D,E),F,state(J,K),L)),
        logen(rescall,member(dyn_obj(L,_,M),J)),
        logen(rescall,member(dyn_field(G,I),M)),
        logen(call,N=[get(A,L,G,I)|K]),
        logen(unfold,on_event(_,B,C,state(J,N),H)).
logen(eval/7,eval(A,B,C,state(D,E),set(F,G,H),I,J)) :-
        logen(unfold,eval(B,C,state(D,E),F,state(K,L),M)),
        logen(unfold,eval(B,C,state(K,L),H,state(N,O),J)),
        logen(call,P=[set(A,M,G,J)|O]),
        logen(unfold,before(B,C,state(N,P),state(Q,R))),
        logen(unfold,update_store(Q,M,G,J,S)),
        logen(unfold,after(B,C,state(S,R),I)).
logen(runtest/2,runtest(1,A)) :-
        logen(call,B=[class(main,object,[field(bool,i)],[],[])]),
        logen(call,C=('',new(main))),
        logen(unfold,eval(B,[],state([],[]),C,D,E)),
        logen(call,A=(D,E)).
logen(runtest/2,runtest(2,A)) :-
        logen(call,B=meth(main,foo,bool,('',this))),
        logen(call,C=[class(main,object,[field(bool,i)],[B],[])]),
        logen(call,D=[]),
        logen(call,E=[]),
        logen(call,F=[]),
        logen(call,G=('',call(('',new(main)),foo,('',true)))),
        logen(unfold,eval(C,D,state(E,F),G,H,I)),
        logen(call,A=(H,I)).
logen(runtest/2,runtest(3,A)) :-
        logen(call,B=meth(main,foo,bool,('',set(('',this),i,('',true))))),
        logen(call,C=[class(main,object,[field(bool,i)],[B],[])]),
        logen(call,D=[]),
        logen(call,E=[]),
        logen(call,F=[]),
        logen(call,G=('',call(('',new(main)),foo,('',true)))),
        logen(unfold,eval(C,D,state(E,F),G,H,I)),
        logen(call,A=(H,I)).
logen(runtest/2,runtest(4,A)) :-
        logen(call,B=meth(main,foo,bool,('',this))),
        logen(call,C=[aspect(1),aspect(2),aspect(3)]),
        logen(call,D=[class(main,object,[field(bool,i)],[B],C)]),
        logen(call,E=[]),
        logen(call,F=[]),
        logen(call,G=[]),
        logen(call,H=('',call(('',new(main)),foo,('',true)))),
        logen(unfold,eval(D,E,state(F,G),H,I,J)),
        logen(call,A=(I,J)).
logen(runtest/2,runtest(5,A)) :-
        logen(call,B=[class(point,figure,[field(bool,xx)],[],[]),class(figure,object,[field(bool,draw)],[],[]),class(main,object,[],[],[])]),
        logen(unfold,eval(B,[],state([],[]),('',new(point)),state(A,_),_)).
logen(runtest/2,runtest(6,A)) :-
        logen(call,B=meth(main,foo,bool,('',this))),
        logen(call,C=[aspect(6)]),
        logen(call,D=[class(main,object,[field(bool,i)],[B],C)]),
        logen(call,E=[]),
        logen(call,F=[]),
        logen(call,G=[]),
        logen(call,H=('',new(main))),
        logen(unfold,eval(D,E,state(F,G),H,_,A)).
:- use_module(library(lists)).
logen(oldvalue/2,oldvalue(A,B)) :-
        logen(rescall,flag(gensym(A),B)),
        logen(rescall,!).
logen(oldvalue/2,oldvalue(_,0)).
logen(set_flag/2,set_flag(A,B)) :-
        logen(rescall,nonvar(A)),
        logen(rescall,retract(flag(A,_))),
        logen(rescall,!),
        logen(rescall,asserta(flag(A,B))).
logen(set_flag/2,set_flag(A,B)) :-
        logen(rescall,nonvar(A)),
        logen(rescall,asserta(flag(A,B))).
logen(flag/2,flag(foo,foo)) :-
        logen(call,fail).
:- dynamic flag/2.
logen(gennum/2,gennum(A,B)) :-
        logen(rescall,var(B)),
        logen(rescall,atom(A)),
        logen(memo,oldvalue(A,C)),
        logen(rescall,B is C+1),
        logen(memo,set_flag(gensym(A),B)).
logen(gensym/2,gensym(A,B)) :-
        logen(unfold,gennum(A,C)),
        logen(rescall,name(D,[95,95])),
        logen(unfold,string_concatenate(A,D,E)),
        logen(unfold,string_concatenate(E,C,B)).
logen(string_concatenate/3,string_concatenate(A,B,C)) :-
        logen(rescall,name(A,D)),
        logen(rescall,name(B,E)),
        logen(rescall,append(D,E,F)),
        logen(rescall,name(C,F)).
logen(println_quoted/1,println_quoted(A)) :-
        logen(rescall,write_term(A,[quoted(true),max_depth(0),numbervars(true),portrayed(true)])),
        logen(rescall,nl).
:- filter
        update_store(static,static,static,static,static).
:- filter
        update_field(static,static,static,static).
:- filter
        class_of(static,static,static,static).
:- filter
        method_body(static,static,static,static).
:- filter
        init_val(static,static).
:- filter
        create_field_list(static,static).
:- filter
        super_class(static,static,static).
:- filter
        init_instance_fields(static,static,static).
:- filter
        init_fields(static,static,static).
:- filter
        aspects(static,static).
:- filter
        execute_advice(static,static,static,static,static,static,static).
:- filter
        before(static,static,static,static).
:- filter
        after(static,static,static,static).
:- filter
        on_event(static,static,static,static,static).
:- filter
        aspect(static,static,static,static,static).
:- filter
        eval(static,dynamic,dynamic,static,dynamic,dynamic).
:- filter
        eval(dynamic,static,dynamic,dynamic,static,dynamic,dynamic).
:- filter
        runtest(static,dynamic).
:- filter
        oldvalue(dynamic,dynamic).
:- filter
        set_flag(dynamic,dynamic).
:- filter
        flag(static,static).
:- filter
        gennum(static,static).
:- filter
        gensym(static,static).
:- filter
        println_quoted(static).
